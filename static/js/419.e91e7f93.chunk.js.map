{"version":3,"file":"static/js/419.e91e7f93.chunk.js","mappings":"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","sources":["components/Profile/Profile.module.css","webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileStatus/ProfileStatus.module.css?c3a9","components/Profile/ProfileInfo/ProfileStatus/ProfileStatusWithHooks.tsx","webpack://samurai-way/./src/components/Profile/ProfileInfo/Info/Info.module.css?1712","webpack://samurai-way/./src/components/Profile/ProfileInfo/Info/InfoItem/InfoItem.module.css?bf9d","components/Profile/ProfileInfo/Info/InfoItem/InfoItem.tsx","components/Profile/ProfileInfo/Info/InfoSelector/InfoSelector.tsx","components/Profile/ProfileInfo/Info/Info.tsx","assets/img/cameraIcon.svg","webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileImg/ProfileImg.module.css?8a0d","components/Profile/ProfileInfo/ProfileImg/ProfileImg.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","hoc/withAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {};","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"ProfileInfo_wrapper__mO+zt\"};","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"ProfileStatus_wrapper__KUY+-\",\"status\":\"ProfileStatus_status__RTL2w\",\"statusEmpty\":\"ProfileStatus_statusEmpty__psr9N\"};","import React, {useEffect, useState} from 'react';\nimport s from './ProfileStatus.module.css'\n\ntype ProfileStatusPropsType = {\n    status: string\n    disable: boolean\n    updateStatus: (status: string) => void\n}\n\nexport const ProfileStatusWithHooks = (props: ProfileStatusPropsType) => {\n\n    let [editMode, setEditMode] = useState<boolean>(false)\n    let [status, setStatus] = useState<string>(props.status)\n\n    useEffect(()=>{\n        setStatus(props.status)\n    }, [props.status])\n\n    const changeEditMode = () => {\n        if (!props.disable) {\n            setEditMode(!editMode)\n            if (editMode) {\n                props.updateStatus(status)\n            }\n        }\n    }\n    const changeStatus = ( e: React.ChangeEvent<HTMLInputElement>) =>{\n        setStatus(e.currentTarget.value)\n    }\n\n        return (\n            <div className={s.wrapper}>\n                {!editMode\n                    ? <div>\n                        <span onClick={changeEditMode}>\n                           { props.status\n                               ? <p className={s.status}>{props.status}</p>\n                               : <p className={s.statusEmpty}>статус пуст</p>}\n                        </span>\n                    </div>\n                    : <div>\n                        <input type=\"text\"\n                               value={status}\n                               autoFocus={true}\n                               onChange={changeStatus}/>\n                        <button onClick={changeEditMode}>Save</button>\n                    </div>\n                }\n\n\n            </div>\n        )\n};\n\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"Info_wrapper__pj6wF\"};","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"InfoItem_wrapper__e07Q2\",\"title\":\"InfoItem_title__U7UYP\",\"input\":\"InfoItem_input__P+j3w\",\"value\":\"InfoItem_value__qZv79\",\"error\":\"InfoItem_error__wa77R\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\nimport s from './InfoItem.module.css'\nimport {updateModalContactType, updateModalType} from \"../../../../../redux/profileReducer/profileReducer\";\n\ntype InfoItemPropsType = {\n    title: string\n    value: string\n    propertyName: string\n    required?: boolean\n    isOwner: boolean\n    updateProfileInfo?: (modal: updateModalType) => void\n    updateContactsHandler?: (contacts: updateModalContactType) => void\n}\n\nexport const InfoItem: React.FC<InfoItemPropsType> = (\n    {\n        title,\n        value,\n        propertyName,\n        updateProfileInfo,\n        updateContactsHandler,\n        required,\n        isOwner\n    }\n) => {\n    const [editMode, setEditMode] = useState<boolean>(false)\n    const [inputValue, setInputValue] = useState<string>(value)\n    const [error, setError] = useState<boolean>(false)\n\n    useEffect(() => {\n        setInputValue(value)\n    }, [value])\n\n    const onSubmit = () => {\n        const setInfo = () => {\n            setEditMode(!editMode)\n            if (updateProfileInfo) {\n                updateProfileInfo({[propertyName]: inputValue})\n            }\n            if (updateContactsHandler) {\n                updateContactsHandler({[propertyName]: inputValue})\n            }\n        }\n        if (required && editMode) {\n            if (inputValue) {\n                setInfo()\n            } else {\n\n                setError(true)\n            }\n        } else setInfo()\n    }\n\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setInputValue(e.currentTarget.value)\n    }\n\n    const changeEditMode = () =>{\n        if (!isOwner) setEditMode(true)\n    }\n\n    return (\n        <div className={s.wrapper}>\n            <div className={s.title}>\n                {title}\n            </div>\n\n            {editMode\n                ? <input className={s.input + ' ' + (error ? s.error : '')}\n                         type=\"text\"\n                         onBlur={onSubmit}\n                         onChange={onChangeHandler}\n                         value={inputValue==='Не указано'?'':inputValue}\n                         autoFocus={true}\n                         required={required}/>\n                : <div className={s.value} onDoubleClick={changeEditMode}>\n                    {value}\n                </div>\n            }\n\n            {/*{editMode*/}\n            {/*    ? <Field value={'aaaa'} type={inputType} placeholder={propertyName} name={propertyName} component={Input}/>*/}\n            {/*    : <div className={s.value}>*/}\n            {/*        {value}*/}\n            {/*    </div>*/}\n            {/*}*/}\n        </div>\n    );\n};\n","import React, {ChangeEvent, useEffect, useState} from 'react';\nimport {updateModalContactType, updateModalType} from \"../../../../../redux/profileReducer/profileReducer\";\nimport s from \"../InfoItem/InfoItem.module.css\";\n\ntype InfoSelectorPropsType = {\n    title: string\n    value: 'true'|'false'\n    propertyName: string\n    required?: boolean\n    isOwner: boolean\n    updateProfileInfo?: (modal: updateModalType) => void\n    updateContactsHandler?: (contacts: updateModalContactType) => void\n}\n\nexport const InfoSelector:React.FC<InfoSelectorPropsType> = (\n    {\n        title,\n        value,\n        propertyName,\n        updateProfileInfo,\n        updateContactsHandler,\n        required,\n        isOwner\n    }\n) => {\n\n    const [editMode, setEditMode] = useState<boolean>(false)\n    const [inputValue, setInputValue] = useState<'true'|'false'>(value)\n\n    useEffect(() => {\n        setInputValue(value)\n    }, [value])\n\n    const onSubmit = () => {\n        const setInfo = () => {\n            setEditMode(!editMode)\n            if (updateProfileInfo) {\n                updateProfileInfo({[propertyName]: inputValue})\n            }\n            if (updateContactsHandler) {\n                updateContactsHandler({[propertyName]: inputValue})\n            }\n        }\n        if (required && editMode) {\n            if (inputValue) {\n                setInfo()\n            }\n        } else setInfo()\n    }\n\n    const onChangeHandler = (e: ChangeEvent<HTMLSelectElement>) => {\n        setInputValue(e.currentTarget.value as 'true'|'false')\n    }\n\n    const changeEditMode = () =>{\n        if (!isOwner) setEditMode(true)\n    }\n\n    return (\n        <div className={s.wrapper}>\n            <div className={s.title}>\n                {title}\n            </div>\n\n            {editMode\n                ?\n                <select className={s.input}\n                        value={inputValue}\n                        onChange={onChangeHandler}\n                        onBlur={onSubmit}\n                >\n                    <option value={'true'}>Да</option>\n                    <option value={'false'}>Нет</option>\n                </select>\n                : <div className={s.value} onDoubleClick={changeEditMode}>\n                    {value==='true'?'Да':'Нет'}\n                </div>\n            }\n\n            {/*{editMode*/}\n            {/*    ? <Field value={'aaaa'} type={inputType} placeholder={propertyName} name={propertyName} component={Input}/>*/}\n            {/*    : <div className={s.value}>*/}\n            {/*        {value}*/}\n            {/*    </div>*/}\n            {/*}*/}\n        </div>\n    );\n};\n\n","import React, {useState} from 'react';\nimport s from './Info.module.css'\nimport {InfoItem} from \"./InfoItem/InfoItem\";\nimport {profileType, updateModalContactType, updateModalType} from \"../../../../redux/profileReducer/profileReducer\";\nimport {InfoSelector} from \"./InfoSelector/InfoSelector\";\n\ntype InfoPropsType = {\n    profile: profileType\n    isOwner: boolean\n    updateProfileInfo: (update: updateModalType) => void\n}\n\n// type FormValuesType = {}\n// type InfoDataFormCustomPropsType = {\n//     profile: profileType\n//     editMode: boolean\n//\n// }\n// type InfoDataFormPropsType =\n//     InfoDataFormCustomPropsType\n//     & InjectedFormProps<FormValuesType, InfoDataFormCustomPropsType>\n\nexport const Info: React.FC<InfoPropsType> = (\n    {\n        profile,\n        updateProfileInfo,\n        isOwner\n    }\n) => {\n\n    const [editMode, setEditMode] = useState<boolean>(false)\n\n    // const onSubmit = (data: any) => {\n    //     setEditMode(false)\n    //     if (editMode){\n    //         updateProfileInfo(data)\n    //     }\n    // }\n\n    return (\n        <div className={s.wrapper}>\n            {/*{!isOwner && !editMode && <button onClick={() => setEditMode(true)}>Edit</button>}*/}\n            {/*{editMode*/}\n            {/*    ? <InfoReduxForm onSubmit={onSubmit} profile={profile} editMode={editMode}/>*/}\n                 <InfoData profile={profile} updateProfileInfo={updateProfileInfo} isOwner={isOwner}/>\n            {/*}*/}\n        </div>\n    );\n};\n\nconst InfoData: React.FC<{ profile: profileType, isOwner: boolean, updateProfileInfo: (update: updateModalType) => void }> = ({profile, updateProfileInfo,isOwner}) => {\n\n    const updateProfileInfoHandler = (modal: updateModalType = {}, contacts: updateModalContactType = {}) =>{\n        updateProfileInfo({...modal, contacts: {...contacts}})\n    }\n\n    return (\n        <>\n            <InfoItem title={'Обо мне'}\n                      value={profile?.aboutMe ? profile.aboutMe : 'Не указано'}\n                      propertyName={'aboutMe'}\n                      updateProfileInfo={updateProfileInfoHandler}\n                      required={true}\n                      isOwner={isOwner}\n            />\n            <InfoSelector title={'Ищу работу'}\n                          value={profile?.lookingForAJob ? 'true' : 'false'}\n                          propertyName={'lookingForAJob'}\n                          updateProfileInfo={updateProfileInfoHandler}\n                          isOwner={isOwner}\n            />\n            <InfoItem title={'Описание работы'}\n                      value={profile?.lookingForAJobDescription ? profile.lookingForAJobDescription : 'Не указано'}\n                      propertyName={'lookingForAJobDescription'}\n                      updateProfileInfo={updateProfileInfoHandler}\n                      required={true}\n                      isOwner={isOwner}\n            />\n            <InfoItem title={'Полное имя'}\n                      value={profile?.fullName ? profile.fullName : 'Не указано'}\n                      propertyName={'fullName'}\n                      updateProfileInfo={updateProfileInfoHandler}\n                      required={true}\n                      isOwner={isOwner}\n            />\n            {profile?.contacts && Object.entries(profile.contacts).map((el, i) => {\n                const updateContactsHandler = (contacts: updateModalContactType) =>{\n                    updateProfileInfoHandler({}, {...contacts})\n                }\n                return <InfoItem key={i}\n                                 title={el[0]}\n                                 value={el[1] ? el[1] : 'Не указано'}\n                                 propertyName={el[0]}\n                                 updateContactsHandler={updateContactsHandler}\n                                 isOwner={isOwner}\n                />\n            })}\n        </>\n    )\n}\n//\n// const InfoDataForm: React.FC<InfoDataFormPropsType> = (props) => {\n//     return (\n//         <form onSubmit={props.handleSubmit}>\n//             <button>Save</button>\n//             <InfoData profile={props.profile} editMode={props.editMode}/>\n//         </form>\n//     )\n// }\n//\n// const InfoReduxForm = reduxForm<FormValuesType, InfoDataFormCustomPropsType>({form: 'profileInfo'})(InfoDataForm)\n","var _g, _g2, _g3;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgCameraIcon(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: \"156px\",\n    height: \"156px\",\n    viewBox: \"-3.84 -3.84 31.68 31.68\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    stroke: \"#ffffff\",\n    strokeWidth: 0.00024000000000000003,\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    id: \"SVGRepo_bgCarrier\",\n    strokeWidth: 0\n  })), _g2 || (_g2 = /*#__PURE__*/React.createElement(\"g\", {\n    id: \"SVGRepo_tracerCarrier\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })), _g3 || (_g3 = /*#__PURE__*/React.createElement(\"g\", {\n    id: \"SVGRepo_iconCarrier\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M7.59843 4.48666C7.86525 3.17678 9.03088 2.25 10.3663 2.25H13.6337C14.9691 2.25 16.1347 3.17678 16.4016 4.48666C16.4632 4.78904 16.7371 5.01086 17.022 5.01086C17.0329 5.01086 17.0439 5.0111 17.0548 5.01157C18.4582 5.07294 19.5362 5.24517 20.4362 5.83558C21.0032 6.20757 21.4909 6.68617 21.871 7.24464C22.3439 7.93947 22.5524 8.73694 22.6524 9.70145C22.75 10.6438 22.75 11.825 22.75 13.3211V13.4062C22.75 14.9023 22.75 16.0835 22.6524 17.0258C22.5524 17.9903 22.3439 18.7878 21.871 19.4826C21.4909 20.0411 21.0032 20.5197 20.4362 20.8917C19.7327 21.3532 18.9262 21.5567 17.948 21.6544C16.9903 21.75 15.789 21.75 14.2634 21.75H9.73657C8.21098 21.75 7.00967 21.75 6.05196 21.6544C5.07379 21.5567 4.26731 21.3532 3.56385 20.8917C2.99682 20.5197 2.50905 20.0411 2.12899 19.4826C1.65612 18.7878 1.44756 17.9903 1.34762 17.0258C1.24998 16.0835 1.24999 14.9023 1.25 13.4062V13.3211C1.24999 11.825 1.24998 10.6438 1.34762 9.70145C1.44756 8.73694 1.65612 7.93947 2.12899 7.24464C2.50905 6.68617 2.99682 6.20757 3.56385 5.83558C4.46383 5.24517 5.5418 5.07294 6.94523 5.01157C6.95615 5.0111 6.96707 5.01086 6.978 5.01086C7.26288 5.01086 7.53683 4.78905 7.59843 4.48666ZM10.3663 3.75C9.72522 3.75 9.18905 4.19299 9.06824 4.78607C8.87258 5.74659 8.021 6.50186 6.99633 6.51078C5.64772 6.57069 4.92536 6.73636 4.38664 7.08978C3.98309 7.35452 3.63752 7.6941 3.36906 8.08857C3.09291 8.49435 2.92696 9.01325 2.83963 9.85604C2.75094 10.7121 2.75 11.8156 2.75 13.3636C2.75 14.9117 2.75094 16.0152 2.83963 16.8712C2.92696 17.714 3.09291 18.2329 3.36906 18.6387C3.63752 19.0332 3.98309 19.3728 4.38664 19.6375C4.80417 19.9114 5.33844 20.0756 6.20104 20.1618C7.07549 20.2491 8.20193 20.25 9.77778 20.25H14.2222C15.7981 20.25 16.9245 20.2491 17.799 20.1618C18.6616 20.0756 19.1958 19.9114 19.6134 19.6375C20.0169 19.3728 20.3625 19.0332 20.6309 18.6387C20.9071 18.2329 21.073 17.714 21.1604 16.8712C21.2491 16.0152 21.25 14.9117 21.25 13.3636C21.25 11.8156 21.2491 10.7121 21.1604 9.85604C21.073 9.01325 20.9071 8.49435 20.6309 8.08857C20.3625 7.6941 20.0169 7.35452 19.6134 7.08978C19.0746 6.73636 18.3523 6.57069 17.0037 6.51078C15.979 6.50186 15.1274 5.74659 14.9318 4.78607C14.8109 4.19299 14.2748 3.75 13.6337 3.75H10.3663ZM14.5197 8.25C14.9339 8.25 15.2697 8.58579 15.2697 9V10.6799C15.2697 11.0346 15.0213 11.3408 14.6742 11.4138L13.1545 11.7339C12.7492 11.8193 12.3514 11.5599 12.2661 11.1546C12.1928 10.8065 12.3737 10.4641 12.6828 10.3202C11.8617 10.0792 10.9379 10.2825 10.2902 10.9303C9.34597 11.8745 9.34597 13.4053 10.2902 14.3495C11.2343 15.2937 12.7652 15.2937 13.7094 14.3495C14.112 13.9469 14.3422 13.4396 14.4019 12.9152C14.4487 12.5037 14.8203 12.208 15.2319 12.2548C15.6434 12.3016 15.9391 12.6732 15.8923 13.0848C15.7957 13.9341 15.421 14.7592 14.77 15.4101C13.24 16.9401 10.7595 16.9401 9.2295 15.4101C7.69953 13.8802 7.69953 11.3996 9.2295 9.86963C10.4581 8.64105 12.2996 8.39903 13.7697 9.14355V9C13.7697 8.58579 14.1055 8.25 14.5197 8.25Z\",\n    fill: \"#ffffff\"\n  }))));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgCameraIcon);\nexport default __webpack_public_path__ + \"static/media/cameraIcon.a7feac5401668801d732932c26801513.svg\";\nexport { ForwardRef as ReactComponent };","// extracted by mini-css-extract-plugin\nexport default {\"imgBox\":\"ProfileImg_imgBox__ivjqD\",\"profilePhoto\":\"ProfileImg_profilePhoto__Niofe\",\"label\":\"ProfileImg_label__GiOxi\",\"input\":\"ProfileImg_input__vI0-L\",\"icon\":\"ProfileImg_icon__8T4U1\"};","import React, {ChangeEvent} from 'react';\nimport photoIcon from \"../../../../assets/img/cameraIcon.svg\";\nimport localPhoto from \"../../../../assets/img/user.png\";\nimport {profileType} from \"../../../../redux/profileReducer/profileReducer\";\nimport s from \"./ProfileImg.module.css\";\n\ntype ProfileImgPropsType = {\n    profile: profileType\n    savePhoto: (file: File) => void\n    isOwner: boolean\n}\n\nexport const ProfileImg: React.FC<ProfileImgPropsType> = (\n    {profile, savePhoto, isOwner}\n) => {\n\n    const profilePhoto = profile?.photos.large || localPhoto\n\n    const selectPhotoHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        if (e.currentTarget.files?.length) {\n            savePhoto(e.currentTarget.files[0])\n        }\n    }\n\n    return (\n        <div className={s.imgBox}>\n            <img className={s.profilePhoto} src={profilePhoto} alt=\"\"/>\n            {isOwner &&\n            <div className={s.inputBox}>\n                <label className={s.label} htmlFor={\"fileInput\"}><img className={s.icon} src={photoIcon}\n                                                                      alt=\"\"/></label>\n                <input className={s.input} id={'fileInput'} type={'file'} onChange={selectPhotoHandler}/>\n            </div>}\n        </div>\n    );\n};\n\n","import React from \"react\";\nimport s from './ProfileInfo.module.css'\nimport {Preloader} from \"../../common/Preloader/Preloader\";\nimport {ProfileStatusWithHooks} from \"./ProfileStatus/ProfileStatusWithHooks\";\nimport {Info} from \"./Info/Info\";\nimport {profileType, updateModalType} from \"../../../redux/profileReducer/profileReducer\";\nimport {ProfileImg} from \"./ProfileImg/ProfileImg\";\n\ntype ProfileInfoType = {\n    profile: profileType\n    status: string\n    isOwner: boolean\n    savePhoto: (file: File) => void\n    updateStatus: (status: string) => void\n    updateProfileInfo: (update: updateModalType) => void\n}\n\nexport const ProfileInfo: React.FC<ProfileInfoType> = (\n    {\n        profile,\n        status,\n        updateStatus,\n        isOwner,\n        savePhoto,\n        updateProfileInfo\n    }\n) => {\n\n    if (!profile) {\n        return <Preloader/>\n    }\n    return (\n        <div className={s.wrapper}>\n            <ProfileImg profile={profile} savePhoto={savePhoto} isOwner={isOwner}/>\n            <div className={s.infoBox}>\n                <ProfileStatusWithHooks status={status}\n                                        updateStatus={updateStatus}\n                                        disable={!isOwner}\n                />\n                <Info profile={profile}\n                      updateProfileInfo={updateProfileInfo}\n                      isOwner={!isOwner}\n                />\n            </div>\n        </div>\n    )\n}","// extracted by mini-css-extract-plugin\nexport default {\"posts\":\"MyPosts_posts__GSiZ2\",\"textareaBox\":\"MyPosts_textareaBox__xgjlg\",\"textarea\":\"MyPosts_textarea__TKsaX\",\"button\":\"MyPosts_button__TKXtI\"};","// extracted by mini-css-extract-plugin\nexport default {\"itemInner\":\"Post_itemInner__uKAr-\",\"item\":\"Post_item__Yu4oG\"};","import React from 'react';\nimport s from './Post.module.css'\n\ntype PostPropsType = {\n    message: string,\n    likesCount: number\n}\n\nexport function Post(props: PostPropsType) {\n    return (\n        <div className={s.item}>\n            <div className={s.itemInner}>\n                <img src=\"https://kartinkived.ru/wp-content/uploads/2021/12/avatarka-dlya-vatsapa-panda-v-ochkah.jpg\"\n                     alt=\"\"/>\n                {props.message}\n            </div>\n            {props.likesCount} likes\n        </div>\n    )\n}","import React, {memo} from 'react';\nimport s from './MyPosts.module.css'\nimport {Post} from './Post/Post';\nimport {MyPostsMapPropsType} from \"./MyPostsContainer\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {maxLength30, required} from \"../../../utils/validators\";\nimport {Textarea} from \"../../FormsControl/FormsControl\";\n\nexport const MyPosts: React.FC<MyPostsMapPropsType> = memo(({\n    posts,\n    addPost,\n}) => {\n    const postsElement = posts.map(post =>{\n        return <Post key={post.id} message={post.message} likesCount={post.likesCount}/>\n    })\n\n    const addPostHandler = (data: FormDataType) =>{\n        addPost(data.newPostText)\n    }\n\n    return (\n        <div>\n            <div className={s.postsHeader}>\n                <h5>MyPosts</h5>\n                <AddPostReduxForm onSubmit={addPostHandler}/>\n            </div>\n            <div className={s.posts}>\n                {postsElement}\n            </div>\n        </div>\n    )\n})\n\ntype FormDataType = {\n    newPostText: string\n}\n\nconst AddPostForm = (props: InjectedFormProps<FormDataType>) =>{\n    return <form className={s.textareaBox} onSubmit={props.handleSubmit}>\n        <Field className={s.textarea}\n               name={'newPostText'}\n               component={Textarea}\n               placeholder={'Tell something'}\n               validate={[required, maxLength30]}/>\n        <button className={s.button}>add</button>\n    </form>\n}\n\nconst AddPostReduxForm = reduxForm<FormDataType>({form: 'newPost'})(AddPostForm)","import React from \"react\";\nimport {MyPosts} from \"./MyPosts\";\nimport {StoreType} from \"../../../redux/reduxStore\";\nimport {addPostActionCreator, postsDataType} from \"../../../redux/profileReducer/profileReducer\";\nimport {connect} from \"react-redux\";\nimport {Dispatch} from \"redux\";\n\n\ntype MapStateToPropsType = {\n    posts: postsDataType[],\n}\n\ntype MapDispatchToPropsType = {\n    addPost: (newPost: string)=>void\n}\n\nexport type MyPostsMapPropsType = MapStateToPropsType & MapDispatchToPropsType\n\nconst mapStateToProps = (state: StoreType): MapStateToPropsType =>{\n    return{\n        posts: state.profilePage.postsData,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType =>{\n    return{\n        addPost: (newPost: string)=> {\n            dispatch(addPostActionCreator(newPost))\n        },\n    }\n}\nconsole.log('render')\n\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\n","import React from 'react';\nimport s from './Profile.module.css'\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\nimport {profileType, updateModalType} from \"../../redux/profileReducer/profileReducer\";\n\ntype ProfilePropsType = {\n    profile: profileType\n    status: string\n    isOwner: boolean\n    savePhoto: (file: File)=>void\n    updateStatus: (status: string) => void\n    updateProfileInfo: (updateModal:updateModalType) => void\n}\n\nexport const Profile: React.FC<ProfilePropsType> = (\n    {\n        profile,\n        status,\n        updateStatus,\n        isOwner,\n        savePhoto,\n        updateProfileInfo\n    }\n) => {\n    return (\n        <div className={s.content}>\n            <ProfileInfo profile={profile}\n                         status={status}\n                         updateStatus={updateStatus}\n                         isOwner={isOwner}\n                         savePhoto={savePhoto}\n                         updateProfileInfo={updateProfileInfo}\n            />\n            <MyPostsContainer\n            />\n        </div>\n    )\n}","import React from 'react';\nimport {Profile} from \"./Profile\";\nimport {AppDispatchType, StoreType} from \"../../redux/reduxStore\";\nimport {connect} from \"react-redux\";\nimport {\n    getUserTC, profileType,\n    savePhotoTC,\n    setStatusTC, updateModalType, updateProfileInfoTC,\n    updateStatus\n} from \"../../redux/profileReducer/profileReducer\";\nimport {useNavigate, useParams} from \"react-router-dom\";\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\nimport {compose} from \"redux\";\n\nexport function withRouter(Children: any) {\n    return (props: ProfileMapToPropsType) => {\n        const navigate = useNavigate()\n        const match = {params: useParams<{ id: string }>()};\n        return <Children {...props} match={match} navigate={navigate}/>\n    }\n}\n\nclass ProfileContainer extends React.Component<ProfileContainerPropsType> {\n\n    refreshProfileInfo() {\n        let userId = this.props.match.params.userId\n        if (!userId && this.props.userId) {\n            userId = this.props.userId.toString()\n        } else {\n            this.props.navigate('/login')\n        }\n        this.props.getUser(userId)\n        this.props.getStatus(userId)\n    }\n\n    componentDidMount() {\n        this.refreshProfileInfo()\n    }\n\n    componentDidUpdate(prevProps: ProfileContainerPropsType) {\n        if (this.props.match.params.userId !== prevProps.match.params.userId)\n            this.refreshProfileInfo()\n    }\n\n    render() {\n        return (\n            <Profile profile={this.props.profile}\n                     status={this.props.status}\n                     updateStatus={this.props.updateStatus}\n                     isOwner={!this.props.match.params.userId}\n                     savePhoto={this.props.savePhoto}\n                     updateProfileInfo={this.props.updateProfileInfo}\n            />\n        );\n    }\n}\n\ntype ProfileMapToPropsType = MapDispatchToPropsType & MapStateToPropsType\n\ntype MapDispatchToPropsType = {\n    getUser: (userId: string) => void\n    updateStatus: (userId: string) => void\n    getStatus: (userId: string) => void\n    savePhoto: (file: File)=>void\n    updateProfileInfo: (updateModal: updateModalType)=> void\n}\ntype MapStateToPropsType = {\n    profile: profileType\n    isAuth: boolean\n    status: string\n    userId: number | null\n}\n\ntype ParamsType = {\n    match: {\n        params: {\n            userId: string\n        }\n    }\n    navigate: (url: string) => void\n}\n\ntype ProfileContainerPropsType = ParamsType & ProfileMapToPropsType\n\nconst MapStateToProps = (state: StoreType): MapStateToPropsType => {\n    return {\n        profile: state.profilePage.profile,\n        isAuth: state.auth.isAuth,\n        status: state.profilePage.status,\n        userId: state.auth.id\n    }\n}\n\nconst MapDispatchToProps = (dispatch: AppDispatchType): MapDispatchToPropsType => {\n    return {\n        getUser: (userId: string) => {\n            dispatch(getUserTC(userId))\n        },\n        updateStatus: (status: string) => {\n            dispatch(updateStatus(status))\n        },\n        getStatus: (userId: string) => {\n            dispatch(setStatusTC(userId))\n        },\n        savePhoto: (file: File) =>{\n            dispatch(savePhotoTC(file))\n        },\n        updateProfileInfo: (updateModal: updateModalType) =>{\n            dispatch(updateProfileInfoTC(updateModal))\n        }\n    }\n}\n\n\nexport default compose<React.ComponentType>(\n    connect(MapStateToProps, MapDispatchToProps),\n    withRouter,\n    withAuthRedirect\n)(ProfileContainer)\n","import React, {ComponentType} from 'react';\nimport {connect} from \"react-redux\";\nimport {RootStateType, StoreType} from \"../redux/reduxStore\";\nimport {Navigate} from \"react-router-dom\";\n\ntype mstpType = {\n    isAuth: boolean\n}\n\nconst mstp = (state: StoreType): mstpType =>{\n    return {\n        isAuth: state.auth.isAuth\n    }\n}\n\nexport const withAuthRedirect = <T, >(Component: ComponentType<T>) => {\n    const RedirectComponent = (props: mstpType) =>{\n        const {isAuth, ...restProps} = props\n        if (!props.isAuth) {\n            return <Navigate to={'/login'}/>\n        }\n        return <Component {...restProps as T} />\n    }\n\n    return connect(mstp)(RedirectComponent)\n};\n\n"],"names":["ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","changeEditMode","disable","updateStatus","className","s","type","value","autoFocus","onChange","e","currentTarget","onClick","InfoItem","title","propertyName","updateProfileInfo","updateContactsHandler","required","isOwner","inputValue","setInputValue","error","setError","onBlur","setInfo","onDoubleClick","InfoSelector","Info","profile","InfoData","updateProfileInfoHandler","modal","contacts","aboutMe","lookingForAJob","lookingForAJobDescription","fullName","Object","entries","map","el","i","ProfileImg","savePhoto","profilePhoto","photos","large","localPhoto","src","alt","htmlFor","photoIcon","id","files","length","ProfileInfo","Preloader","Post","message","likesCount","MyPosts","memo","posts","addPost","postsElement","post","AddPostReduxForm","onSubmit","data","newPostText","reduxForm","form","handleSubmit","Field","name","component","Textarea","placeholder","validate","maxLength30","console","log","MyPostsContainer","connect","state","profilePage","postsData","dispatch","newPost","addPostActionCreator","Profile","withRouter","Children","navigate","useNavigate","match","params","useParams","ProfileContainer","userId","this","toString","getUser","getStatus","refreshProfileInfo","prevProps","React","compose","isAuth","auth","getUserTC","setStatusTC","file","savePhotoTC","updateModal","updateProfileInfoTC","withAuthRedirect","mstp","Component","restProps","to"],"sourceRoot":""}