{"version":3,"file":"static/js/819.a8b02d2a.chunk.js","mappings":"wKACA,GAAgB,QAAU,yBAAyB,cAAgB,+BAA+B,YAAc,6BAA6B,SAAW,0BAA0B,OAAS,yBCA3L,K,mBCQaA,EAAa,SAACC,GACvB,IAAIC,EAAO,YAAcD,EAAME,GAC/B,OACI,gBAAKC,UAAWC,EAAAA,WAAhB,UACI,SAAC,KAAD,CAASC,GAAIJ,EAAb,SAAoBD,EAAMM,UCZtC,KCMaC,EAAe,SAACP,GACzB,OACI,gBAAKG,UAAWC,EAAAA,aAAhB,SAAiCJ,EAAMQ,W,uCCkDzCC,GAAsBC,EAAAA,EAAAA,GAAwB,CAACC,KAAM,cAA/BD,EAZL,SAACV,GACpB,OAAO,kBAAMG,UAAWC,EAAAA,YAAeQ,SAAUZ,EAAMa,aAAhD,WACS,SAACC,EAAA,EAAD,CAAOX,UAAWC,EAAAA,SACXW,UAAWC,EAAAA,EACXV,KAAM,iBACNW,YAAa,iBACbC,SAAU,CAACC,EAAAA,GAAUC,EAAAA,OAExC,mBAAQjB,UAAWC,EAAAA,OAAnB,uB,uCClBR,GALyBiB,EAAAA,EAAAA,KACrBC,EAAAA,EAAAA,KAdoB,SAACC,GACrB,MAAM,CACFA,MAAOA,EAAMC,gBAIM,SAACC,GACxB,MAAM,CACFC,WAAY,SAAClB,GACTiB,GAASE,EAAAA,EAAAA,GAAwBnB,SAMzCoB,EAAAA,EAFqBP,EDvByB,SAAC,GAK7C,IAHEE,EAGH,EAHGA,MACAG,EAEH,EAFGA,WAKEG,EAAiBN,EAAMO,YAAYC,KAAI,SAAAC,GACzC,OAAO,SAACjC,EAAD,CAAYO,KAAM0B,EAAO1B,KAAMJ,GAAI8B,EAAO9B,IAAS8B,EAAO9B,OAE/D+B,EAAkBV,EAAMW,aAAaH,KAAI,SAAAvB,GAC3C,OAAO,SAACD,EAAD,CAAcC,QAASA,EAAQ2B,MAAW3B,EAAQN,OAO7D,OACI,iBAAKC,UAAWC,EAAAA,QAAhB,WACI,gBAAKD,UAAWC,EAAAA,aAAhB,SACKyB,KAEL,iBAAK1B,UAAWC,EAAAA,cAAhB,WACI,gBAAKD,UAAWC,EAAAA,iBAAhB,SACK6B,KAEL,SAACxB,EAAD,CAAqBG,SAbP,SAACwB,GACvBV,EAAWU,EAAKC,6B,gIEhBlBC,EAAO,SAACf,GACV,MAAO,CACHgB,OAAQhB,EAAMiB,KAAKD,SAIdX,EAAmB,SAAMa,GASlC,OAAOnB,EAAAA,EAAAA,IAAQgB,EAARhB,EARmB,SAACtB,GACQA,EAAxBuC,OAAP,IAAkBG,GAAlB,OAA+B1C,EAA/B,GACA,OAAKA,EAAMuC,QAGJ,SAACE,GAAD,UAAeC,KAFX,SAAC,KAAD,CAAUrC,GAAI","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogsItem/DialogsItem.module.css","components/Dialogs/DialogsItem/DialogsItem.tsx","components/Dialogs/MessagesItem/MessagesItem.module.css","components/Dialogs/MessagesItem/MessagesItem.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","hoc/withAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__oe96H\",\"messagesItems\":\"Dialogs_messagesItems__Ppa9C\",\"textareaBox\":\"Dialogs_textareaBox__ZbABx\",\"textarea\":\"Dialogs_textarea__anpMz\",\"button\":\"Dialogs_button__8Qbmd\"};","// extracted by mini-css-extract-plugin\nexport default {};","import React from \"react\";\nimport s from './DialogsItem.module.css'\nimport {NavLink} from \"react-router-dom\";\n\ntype DialogItemPropsType = {\n    name: string,\n    id: number\n}\n\nexport const DialogItem = (props: DialogItemPropsType) => {\n    let path = '/dialogs/' + props.id\n    return (\n        <div className={s.dialogItem}>\n            <NavLink to={path}>{props.name}</NavLink>\n        </div>\n    )\n}","// extracted by mini-css-extract-plugin\nexport default {};","import React from \"react\";\nimport s from './MessagesItem.module.css'\n\ntype MessagesItemPropsType = {\n    message: string\n}\n\nexport const MessagesItem = (props: MessagesItemPropsType) => {\n    return (\n        <div className={s.messagesItem}>{props.message}</div>\n    )\n}","import React from \"react\";\nimport s from './Dialogs.module.css';\nimport {DialogItem} from \"./DialogsItem/DialogsItem\";\nimport {MessagesItem} from \"./MessagesItem/MessagesItem\";\nimport {DialogsMapProps} from \"./DialogsContainer\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {maxLength30, maxLength50, required} from \"../../utils/validators\";\nimport {Textarea} from \"../FormsControl/FormsControl\";\n\nexport const Dialogs: React.FC<DialogsMapProps> = (\n    {\n        state,\n        addMessage,\n    }\n) => {\n\n\n    const dialogsElement = state.dialogsData.map(dialog => {\n        return <DialogItem name={dialog.name} id={dialog.id} key={dialog.id}/>\n    })\n    const messagesElement = state.messagesData.map(message => {\n        return <MessagesItem message={message.text} key={message.id}/>\n    })\n\n    const addMessageHandler = (data: FormDataType) =>{\n        addMessage(data.newMessageText)\n    }\n\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogsItems}>\n                {dialogsElement}\n            </div>\n            <div className={s.messagesItems}>\n                <div className={s.messagesItemsBox}>\n                    {messagesElement}\n                </div>\n                <AddMessageReduxForm onSubmit={addMessageHandler}/>\n            </div>\n        </div>\n    )\n}\n\ntype FormDataType = {\n    newMessageText: string\n}\n\nconst AddMessageForm = (props: InjectedFormProps<FormDataType>) =>{\n    return <form className={s.textareaBox} onSubmit={props.handleSubmit}>\n                    <Field className={s.textarea}\n                           component={Textarea}\n                           name={'newMessageText'}\n                           placeholder={'Tell something'}\n                           validate={[required, maxLength50]}\n                    />\n        <button className={s.button}>add</button>\n    </form>\n}\n\nconst AddMessageReduxForm = reduxForm<FormDataType>({form: 'newMessage'})(AddMessageForm)","import React from \"react\";\nimport {Dialogs} from \"./Dialogs\";\nimport {dialogsPageType, StoreType} from \"../../redux/reduxStore\";\nimport {addMessageActionCreator} from \"../../redux/dialogsReducer\";\nimport {connect} from \"react-redux\";\nimport {compose, Dispatch} from \"redux\";\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\n\n\ntype MapStateToPropsType = {\n    state: dialogsPageType\n}\n\ntype MapDispatchToPropsType = {\n    addMessage: (message: string)=>void\n}\n\nexport type DialogsMapProps = MapStateToPropsType & MapDispatchToPropsType\n\nconst mapStateToProps = (state: StoreType): MapStateToPropsType =>{\n    return{\n        state: state.dialogsPage,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType =>{\n    return{\n        addMessage: (message:string) =>{\n            dispatch(addMessageActionCreator(message))\n        },\n    }\n}\nconst DialogsContainer = compose<React.ComponentType>(\n    connect(mapStateToProps, mapDispatchToProps),\n    withAuthRedirect\n)(Dialogs)\n\nexport default DialogsContainer","import React, {ComponentType} from 'react';\nimport {connect} from \"react-redux\";\nimport {RootStateType, StoreType} from \"../redux/reduxStore\";\nimport {Navigate} from \"react-router-dom\";\n\ntype mstpType = {\n    isAuth: boolean\n}\n\nconst mstp = (state: StoreType): mstpType =>{\n    return {\n        isAuth: state.auth.isAuth\n    }\n}\n\nexport const withAuthRedirect = <T, >(Component: ComponentType<T>) => {\n    const RedirectComponent = (props: mstpType) =>{\n        const {isAuth, ...restProps} = props\n        if (!props.isAuth) {\n            return <Navigate to={'/login'}/>\n        }\n        return <Component {...restProps as T} />\n    }\n\n    return connect(mstp)(RedirectComponent)\n};\n\n"],"names":["DialogItem","props","path","id","className","s","to","name","MessagesItem","message","AddMessageReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","placeholder","validate","required","maxLength50","compose","connect","state","dialogsPage","dispatch","addMessage","addMessageActionCreator","withAuthRedirect","dialogsElement","dialogsData","map","dialog","messagesElement","messagesData","text","data","newMessageText","mstp","isAuth","auth","Component","restProps"],"sourceRoot":""}