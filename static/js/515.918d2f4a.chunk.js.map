{"version":3,"file":"static/js/515.918d2f4a.chunk.js","mappings":"2PACA,K,6BCQaA,EAAyB,SAACC,GAEnC,OAA8BC,EAAAA,EAAAA,WAAkB,GAAhD,eAAKC,EAAL,KAAeC,EAAf,KACA,GAA0BF,EAAAA,EAAAA,UAAiBD,EAAMI,QAAjD,eAAKA,EAAL,KAAaC,EAAb,MAEAC,EAAAA,EAAAA,YAAU,WACND,EAAUL,EAAMI,UACjB,CAACJ,EAAMI,SAEV,IAAMG,EAAiB,WACnBJ,GAAaD,GACTA,GACAF,EAAMQ,aAAaJ,IAYvB,OACI,yBACMF,GAMI,4BACE,kBAAOO,KAAK,OACLC,MAAON,EACPO,WAAW,EACXC,SArBN,SAAEC,GACnBR,EAAUQ,EAAEC,cAAcJ,WAqBV,mBAAQK,QAASR,EAAjB,sBAVF,0BACE,iBAAMQ,QAASR,EAAf,SACIP,EAAMI,cCzBrBY,EAAyC,SAAC,GAMlD,IAJGC,EAIJ,EAJIA,QACAb,EAGJ,EAHIA,OACAI,EAEJ,EAFIA,aAGJ,OAAKS,GAID,4BACI,gBAAKC,IAAKD,EAAQE,OAAOC,MAAOC,IAAI,MACpC,SAACtB,EAAD,CAAwBK,OAAQA,EAAQI,aAAcA,QALnD,SAACc,EAAA,EAAD,KCpBf,GAAgB,MAAQ,uBAAuB,YAAc,6BAA6B,SAAW,0BAA0B,OAAS,yBCAxI,EAA4B,wBAA5B,EAA2D,mBCOpD,SAASC,EAAKvB,GACjB,OACI,iBAAKwB,UAAWC,EAAhB,WACI,iBAAKD,UAAWC,EAAhB,WACI,gBAAKP,IAAI,6FACJG,IAAI,KACRrB,EAAM0B,WAEV1B,EAAM2B,WANX,Y,2CCFKC,GAAyCC,EAAAA,EAAAA,OAAK,YAGpD,IAFHC,EAEE,EAFFA,MACAC,EACE,EADFA,QAEMC,EAAeF,EAAMG,KAAI,SAAAC,GAC3B,OAAO,SAACX,EAAD,CAAoBG,QAASQ,EAAKR,QAASC,WAAYO,EAAKP,YAAjDO,EAAKC,OAS3B,OACI,4BACI,iBAAKX,UAAWC,EAAAA,YAAhB,WACI,qCACA,SAACW,EAAD,CAAkBC,SARP,SAACC,GACpBP,EAAQO,EAAKC,oBAST,gBAAKf,UAAWC,EAAAA,MAAhB,SACKO,UAqBXI,GAAmBI,EAAAA,EAAAA,GAAwB,CAACC,KAAM,WAA/BD,EAXL,SAACxC,GACjB,OAAO,kBAAMwB,UAAWC,EAAAA,YAAeY,SAAUrC,EAAM0C,aAAhD,WACH,SAACC,EAAA,EAAD,CAAOnB,UAAWC,EAAAA,SACXmB,KAAM,cACNC,UAAWC,EAAAA,EACXC,YAAa,iBACbC,SAAU,CAACC,EAAAA,GAAUC,EAAAA,OAC5B,mBAAQ1B,UAAWC,EAAAA,OAAnB,uB,mBCfR0B,QAAQC,IAAI,UAEL,IAAMC,GAAmBC,EAAAA,EAAAA,KAfR,SAACC,GACrB,MAAM,CACFzB,MAAOyB,EAAMC,YAAYC,cAIN,SAACC,GACxB,MAAM,CACF3B,QAAS,SAAC4B,GACND,GAASE,EAAAA,EAAAA,IAAqBD,QAMVL,CAA6C1B,GCpBhEiC,EAAsC,SAAC,GAM9C,IAJE5C,EAIH,EAJGA,QACAb,EAGH,EAHGA,OACAI,EAEH,EAFGA,aAGJ,OACI,iBAAKgB,UAAWC,EAAAA,QAAhB,WACI,SAACT,EAAD,CAAaC,QAASA,EAASb,OAAQA,EAAQI,aAAcA,KAC7D,SAAC6C,EAAD,Q,8BCbL,SAASS,EAAWC,GACvB,OAAM,SAAC/D,GACH,IAAMgE,GAAWC,EAAAA,EAAAA,MACXC,EAAS,CAACC,QAAQC,EAAAA,EAAAA,OACxB,OAAO,SAACL,GAAD,kBAAc/D,GAAd,IAAsBkE,MAASA,EAAOF,SAAUA,MAE9D,IAEKK,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,SAAAA,IAAAA,OAAAA,EAAAA,EAAAA,GAAAA,KAAAA,GAAAA,EAAAA,MAAAA,KAAAA,WAiBD,OAjBCA,EAAAA,EAAAA,GAAAA,EAAAA,CAAAA,CAAAA,IAAAA,oBAAAA,MAEF,WACI,IAAIC,EAAQC,KAAKvE,MAAMkE,MAAMC,OAAOG,QAC/BA,GAAQC,KAAKvE,MAAMsE,OACpBA,EAASC,KAAKvE,MAAMsE,OAAOE,WAE3BD,KAAKvE,MAAMgE,SAAS,UAExBO,KAAKvE,MAAMyE,QAAQH,GACnBC,KAAKvE,MAAM0E,UAAUJ,KACxB,oBAED,WACI,OACI,SAACT,EAAD,CAAS5C,QAASsD,KAAKvE,MAAMiB,QAASb,OAAQmE,KAAKvE,MAAMI,OAAQI,aAAc+D,KAAKvE,MAAMQ,mBAEjG,EAjBC6D,CAAyBM,EAAAA,WAsE/B,GAAeC,EAAAA,EAAAA,KACXtB,EAAAA,EAAAA,KA1BoB,SAACC,GACrB,MAAO,CACHtC,QAASsC,EAAMC,YAAYvC,QAC3B4D,OAAQtB,EAAMuB,KAAKD,OACnBzE,OAAQmD,EAAMC,YAAYpD,OAC1BkE,OAAQf,EAAMuB,KAAK3C,OAIA,SAACuB,GACxB,MAAO,CACHe,QAAS,SAACH,GACNZ,GAASqB,EAAAA,EAAAA,IAAUT,KAEvB9D,aAAc,SAACJ,GACXsD,GAASlD,EAAAA,EAAAA,IAAaJ,KAE1BsE,UAAW,SAACJ,GACRZ,GAASsB,EAAAA,EAAAA,IAAYV,SAS7BR,EACAmB,EAAAA,EAHJ,CAIEZ,I,gICnFIa,EAAO,SAAC3B,GACV,MAAO,CACHsB,OAAQtB,EAAMuB,KAAKD,SAIdI,EAAmB,SAAME,GASlC,OAAO7B,EAAAA,EAAAA,IAAQ4B,EAAR5B,EARmB,SAACtD,GACQA,EAAxB6E,OAAP,IAAkBO,GAAlB,OAA+BpF,EAA/B,GACA,OAAKA,EAAM6E,QAGJ,SAACM,GAAD,UAAeC,KAFX,SAAC,KAAD,CAAUC,GAAI","sources":["components/Profile/Profile.module.css","components/Profile/ProfileInfo/ProfileStatus/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","hoc/withAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {};","import React, {useEffect, useState} from 'react';\nimport s from './ProfileStatus.module.css'\nimport {updateStatus} from \"../../../../redux/profileReducer\";\n\ntype ProfileStatusPropsType = {\n    status: string\n    updateStatus: (status: string) => void\n}\n\nexport const ProfileStatusWithHooks = (props: ProfileStatusPropsType) => {\n\n    let [editMode, setEditMode] = useState<boolean>(false)\n    let [status, setStatus] = useState<string>(props.status)\n\n    useEffect(()=>{\n        setStatus(props.status)\n    }, [props.status])\n\n    const changeEditMode = () => {\n        setEditMode(!editMode)\n        if (editMode){\n            props.updateStatus(status)\n        }\n    }\n    const changeStatus = ( e: React.ChangeEvent<HTMLInputElement>) =>{\n        setStatus(e.currentTarget.value)\n    }\n    // componentDidUpdate(prevProps: Readonly<ProfileStatusPropsType>, prevState: Readonly<ProfileStatusStateType>,) {\n    //     if (prevProps.status!==this.props.status){\n    //         this.setState({status:this.props.status})\n    //     }\n    // }\n\n        return (\n            <div>\n                {!editMode\n                    ? <div>\n                        <span onClick={changeEditMode}>\n                           {props.status}\n                        </span>\n                    </div>\n                    : <div>\n                        <input type=\"text\"\n                               value={status}\n                               autoFocus={true}\n                               onChange={changeStatus}/>\n                        <button onClick={changeEditMode}>Save</button>\n                    </div>\n                }\n\n\n            </div>\n        )\n};\n\n","import React from \"react\";\nimport s from './ProfileInfo.module.css'\nimport {profileType} from \"../../../redux/reduxStore\";\nimport {Preloader} from \"../../common/Preloader/Preloader\";\nimport {ProfileStatus} from \"./ProfileStatus/ProfileStatus\";\nimport {ProfileStatusWithHooks} from \"./ProfileStatus/ProfileStatusWithHooks\";\n\ntype ProfileInfoType = {\n    profile: profileType\n    status: string\n    updateStatus: (status: string) => void\n}\n\nexport const ProfileInfo: React.FC<ProfileInfoType> = (\n    {\n        profile,\n        status,\n        updateStatus\n    }\n) =>{\n    if (!profile){\n        return <Preloader />\n    }\n    return(\n        <div>\n            <img src={profile.photos.large} alt=\"\"/>\n            <ProfileStatusWithHooks status={status} updateStatus={updateStatus} />\n        </div>\n    )\n}","// extracted by mini-css-extract-plugin\nexport default {\"posts\":\"MyPosts_posts__GSiZ2\",\"textareaBox\":\"MyPosts_textareaBox__xgjlg\",\"textarea\":\"MyPosts_textarea__TKsaX\",\"button\":\"MyPosts_button__TKXtI\"};","// extracted by mini-css-extract-plugin\nexport default {\"itemInner\":\"Post_itemInner__uKAr-\",\"item\":\"Post_item__Yu4oG\"};","import React from 'react';\nimport s from './Post.module.css'\n\ntype PostPropsType = {\n    message: string,\n    likesCount: number\n}\n\nexport function Post(props: PostPropsType) {\n    return (\n        <div className={s.item}>\n            <div className={s.itemInner}>\n                <img src=\"https://kartinkived.ru/wp-content/uploads/2021/12/avatarka-dlya-vatsapa-panda-v-ochkah.jpg\"\n                     alt=\"\"/>\n                {props.message}\n            </div>\n            {props.likesCount} likes\n        </div>\n    )\n}","import React, {memo} from 'react';\nimport s from './MyPosts.module.css'\nimport {Post} from './Post/Post';\nimport {MyPostsMapPropsType} from \"./MyPostsContainer\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {maxLength30, required} from \"../../../utils/validators\";\nimport {Textarea} from \"../../FormsControl/FormsControl\";\n\nexport const MyPosts: React.FC<MyPostsMapPropsType> = memo(({\n    posts,\n    addPost,\n}) => {\n    const postsElement = posts.map(post =>{\n        return <Post key={post.id} message={post.message} likesCount={post.likesCount}/>\n    })\n\n    const newPostElement = React.createRef<HTMLTextAreaElement>()\n\n    const addPostHandler = (data: FormDataType) =>{\n        addPost(data.newPostText)\n    }\n\n    return (\n        <div>\n            <div className={s.postsHeader}>\n                <h5>MyPosts</h5>\n                <AddPostReduxForm onSubmit={addPostHandler}/>\n            </div>\n            <div className={s.posts}>\n                {postsElement}\n            </div>\n        </div>\n    )\n})\n\ntype FormDataType = {\n    newPostText: string\n}\n\nconst AddPostForm = (props: InjectedFormProps<FormDataType>) =>{\n    return <form className={s.textareaBox} onSubmit={props.handleSubmit}>\n        <Field className={s.textarea}\n               name={'newPostText'}\n               component={Textarea}\n               placeholder={'Tell something'}\n               validate={[required, maxLength30]}/>\n        <button className={s.button}>add</button>\n    </form>\n}\n\nconst AddPostReduxForm = reduxForm<FormDataType>({form: 'newPost'})(AddPostForm)","import React from \"react\";\nimport {MyPosts} from \"./MyPosts\";\nimport {postsDataType, StoreType} from \"../../../redux/reduxStore\";\nimport {addPostActionCreator} from \"../../../redux/profileReducer\";\nimport {connect} from \"react-redux\";\nimport {Dispatch} from \"redux\";\n\n\ntype MapStateToPropsType = {\n    posts: postsDataType[],\n}\n\ntype MapDispatchToPropsType = {\n    addPost: (newPost: string)=>void\n}\n\nexport type MyPostsMapPropsType = MapStateToPropsType & MapDispatchToPropsType\n\nconst mapStateToProps = (state: StoreType): MapStateToPropsType =>{\n    return{\n        posts: state.profilePage.postsData,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType =>{\n    return{\n        addPost: (newPost: string)=> {\n            dispatch(addPostActionCreator(newPost))\n        },\n    }\n}\nconsole.log('render')\n\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\n","import React from 'react';\nimport s from './Profile.module.css'\nimport { MyPosts } from './MyPosts/MyPosts'\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\nimport {profileType, StoreType} from \"../../redux/reduxStore\";\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\n\ntype ProfilePropsType = {\n    profile: profileType\n    status: string\n    updateStatus: (status: string) => void\n}\n\nexport const Profile: React.FC<ProfilePropsType> = (\n    {\n        profile,\n        status,\n        updateStatus\n    }\n) => {\n    return (\n        <div className={s.content}>\n            <ProfileInfo profile={profile} status={status} updateStatus={updateStatus}/>\n            <MyPostsContainer\n            />\n        </div>\n    )\n}","import React, {ComponentType} from 'react';\nimport {Profile} from \"./Profile\";\nimport {AppDispatchType, profileType, StoreType} from \"../../redux/reduxStore\";\nimport {connect} from \"react-redux\";\nimport {getUserTC, setStatusTC, setUserProfileActionCreator, updateStatus} from \"../../redux/profileReducer\";\nimport {useNavigate, useParams} from \"react-router-dom\";\nimport {Navigate} from 'react-router-dom'\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\nimport {compose} from \"redux\";\n\nexport function withRouter(Children: any){\n    return(props: ProfileMapToPropsType)=>{\n        const navigate = useNavigate()\n        const match  = {params: useParams<{id: string}>()};\n        return <Children {...props}  match = {match} navigate={navigate}/>\n    }\n}\n\nclass ProfileContainer extends React.Component<ProfileContainerPropsType> {\n\n    componentDidMount() {\n        let userId =this.props.match.params.userId\n        if (!userId&&this.props.userId) {\n            userId = this.props.userId.toString()\n        } else {\n            this.props.navigate('/login')\n        }\n        this.props.getUser(userId)\n        this.props.getStatus(userId)\n    }\n\n    render() {\n        return (\n            <Profile profile={this.props.profile} status={this.props.status} updateStatus={this.props.updateStatus}/>\n        );\n    }\n}\n\ntype ProfileMapToPropsType = MapDispatchToPropsType & MapStateToPropsType\n\ntype MapDispatchToPropsType = {\n    getUser: (userId: string) => void\n    updateStatus: (userId: string) => void\n    getStatus: (userId: string) => void\n}\ntype MapStateToPropsType = {\n    profile: profileType\n    isAuth: boolean\n    status: string\n    userId: number | null\n}\n\ntype ParamsType = {\n    match: {\n        params: {\n            userId: string\n        }\n    }\n    navigate: (url: string)=> void\n}\n\ntype ProfileContainerPropsType = ParamsType & ProfileMapToPropsType\n\nconst MapStateToProps = (state: StoreType): MapStateToPropsType => {\n    return {\n        profile: state.profilePage.profile,\n        isAuth: state.auth.isAuth,\n        status: state.profilePage.status,\n        userId: state.auth.id\n    }\n}\n\nconst MapDispatchToProps = (dispatch: AppDispatchType): MapDispatchToPropsType => {\n    return {\n        getUser: (userId: string) => {\n            dispatch(getUserTC(userId))\n        },\n        updateStatus: (status: string) =>{\n            dispatch(updateStatus(status))\n        },\n        getStatus: (userId: string) =>{\n            dispatch(setStatusTC(userId))\n    }\n    }\n}\n\n\n\nexport default compose<React.ComponentType>(\n    connect(MapStateToProps, MapDispatchToProps),\n    withRouter,\n    withAuthRedirect\n)(ProfileContainer)\n","import React, {ComponentType} from 'react';\nimport {connect} from \"react-redux\";\nimport {RootStateType, StoreType} from \"../redux/reduxStore\";\nimport {Navigate} from \"react-router-dom\";\n\ntype mstpType = {\n    isAuth: boolean\n}\n\nconst mstp = (state: StoreType): mstpType =>{\n    return {\n        isAuth: state.auth.isAuth\n    }\n}\n\nexport const withAuthRedirect = <T, >(Component: ComponentType<T>) => {\n    const RedirectComponent = (props: mstpType) =>{\n        const {isAuth, ...restProps} = props\n        if (!props.isAuth) {\n            return <Navigate to={'/login'}/>\n        }\n        return <Component {...restProps as T} />\n    }\n\n    return connect(mstp)(RedirectComponent)\n};\n\n"],"names":["ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","changeEditMode","updateStatus","type","value","autoFocus","onChange","e","currentTarget","onClick","ProfileInfo","profile","src","photos","large","alt","Preloader","Post","className","s","message","likesCount","MyPosts","memo","posts","addPost","postsElement","map","post","id","AddPostReduxForm","onSubmit","data","newPostText","reduxForm","form","handleSubmit","Field","name","component","Textarea","placeholder","validate","required","maxLength30","console","log","MyPostsContainer","connect","state","profilePage","postsData","dispatch","newPost","addPostActionCreator","Profile","withRouter","Children","navigate","useNavigate","match","params","useParams","ProfileContainer","userId","this","toString","getUser","getStatus","React","compose","isAuth","auth","getUserTC","setStatusTC","withAuthRedirect","mstp","Component","restProps","to"],"sourceRoot":""}